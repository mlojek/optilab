"""
Approximate ranking metamodel based on lmm-CMA-ES.
"""

from ..data_classes import PointList
from ..functions import ObjectiveFunction
from ..functions.surrogate import SurrogateObjectiveFunction


def rank_items(items: PointList) -> PointList:
    """
    Given a list of points, rank them in ascending order based on the y value.

    Args:
        items (PointList): List of points to rank.

    Return:
        PointList: The same PointList ranked by y value.
    """
    return PointList(points=list(sorted(items.points, key=lambda point: point.y)))


class ApproximateRankingMetamodel:
    """Approximate ranking metamodel based on lmm-CMA-ES"""

    def __init__(
        self,
        population_size: int,
        mu: int,
        objective_function: ObjectiveFunction,
        surrogate_function: SurrogateObjectiveFunction,
    ) -> None:
        """
        Class constructor.

        Args:
            population_size (int): The population size (lambda).
            mu (int): The number of points compared in the ranking procedure (mu).
            objective_function (ObjectiveFunction): The objective function that's being optimized.
            surrogate_function (SurrogateObjectieFunction): Surrogate function used to estimate
                the optimized function.
        """
        self.population_size = population_size
        self.mu = mu

        self.n_init = population_size
        self.n_step = max(1, population_size // 10)

        self.train_set = PointList(points=[])

        self.objective_function = objective_function
        self.surrogate_function = surrogate_function

    def _update_n(self, num_iters: int) -> None:
        """
        Updates n_init and n_step values base on the number of algorithm iterations.

        Args:
            num_iters (int): The number of iterations done by the algorithm.
        """
        if num_iters > 2:
            self.n_init = min(
                self.n_init + self.n_step, self.population_size - self.n_step
            )
        elif num_iters < 2:
            self.n_init = max(self.n_step, self.n_init - self.n_step)

    def __call__(self, points: PointList) -> PointList:
        """
        Approximates the values of provided points with surrogate objective function.

        Args:
            points (PointList): List of points to evaluate.

        Returns:
            PointList: List of evaluated points.
        """
        return PointList(points=[self.surrogate_function(x) for x in points])

    def evaluate(self, xs: PointList) -> PointList:
        """
        Evaluate provided point with the objective function and append results to the training
        set and retrain the surrogate function on new training data.

        Args:
            xs (PointList): List of point to evaluate with the objective function.

        Returns:
            PointList: List of evaluated points.
        """
        result = PointList(
            points=[self.objective_function(point) for point in xs.points]
        )
        self.train_set.extend(result)
        self.surrogate_function.train(self.train_set)
        return result

    def get_log(self) -> PointList:
        """
        Get the list of points evaluated by the objective function.

        Returns:
            PointList: List of points evaluated by the objective function.
        """
        return self.train_set

    def adapt(self, xs: PointList) -> None:
        """
        Perform another loop of the optimization on new data.

        Args:
            xs (PointList): Solution candidates generated by the optimizer.

        Raises:
            ValueError: When number of provided points mismatches the expected input size.
        """
        if not len(xs) == self.population_size:
            raise ValueError(
                f"The number of provided points is different than expected."
                f"Expected {self.population_size}, got {len(xs)}."
            )

        if len(self.train_set) < self.population_size:
            self.evaluate(xs)
            return

        items = self(xs)

        items_ranked = rank_items(items)
        items_mu_ranked = PointList(points=items_ranked[: self.mu])

        self.evaluate(PointList(points=items_ranked.points[: self.n_init]))

        num_iter = 0
        for _ in range((self.population_size - self.n_init) // self.n_step):
            num_iter += 1

            new_items = self(xs)

            new_items_ranked = rank_items(new_items)
            new_items_mu_ranked = PointList(points=new_items_ranked[: self.mu])

            if all(
                (
                    (new_pt.x == pt.x).all()
                    for new_pt, pt in zip(new_items_mu_ranked, items_mu_ranked)
                )
            ):
                break

            counter = 0
            to_eval = []
            for nx in new_items_ranked:
                for tmp_x in self.train_set:
                    if not (nx.x == tmp_x.x).all():
                        counter += 1
                        to_eval.append(nx)
                        break
                if counter >= self.n_step:
                    break
            items_mu_ranked = new_items_mu_ranked
            self.evaluate(PointList(points=to_eval))

        print(num_iter)
        self._update_n(num_iter)
